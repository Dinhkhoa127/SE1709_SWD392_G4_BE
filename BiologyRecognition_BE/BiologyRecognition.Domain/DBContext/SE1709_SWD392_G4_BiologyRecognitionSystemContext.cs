// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BiologyRecognition.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace BiologyRecognition.Domain.DBContext;

public partial class SE1709_SWD392_G4_BiologyRecognitionSystemContext : DbContext
{
    public SE1709_SWD392_G4_BiologyRecognitionSystemContext()
    {
    }

    public SE1709_SWD392_G4_BiologyRecognitionSystemContext(DbContextOptions<SE1709_SWD392_G4_BiologyRecognitionSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Article> Articles { get; set; }

    public virtual DbSet<Artifact> Artifacts { get; set; }

    public virtual DbSet<ArtifactMedia> ArtifactMedia { get; set; }

    public virtual DbSet<ArtifactType> ArtifactTypes { get; set; }

    public virtual DbSet<Chapter> Chapters { get; set; }

    public virtual DbSet<Recognition> Recognitions { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.ArticleId).HasName("PK__Article__CC36F660D0CABB7F");

            entity.ToTable("Article");

            entity.Property(e => e.ArticleId).HasColumnName("article_id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ArticleCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Article__Created__5629CD9C");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ArticleModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("FK__Article__Modifie__571DF1D5");

            entity.HasMany(d => d.Artifacts).WithMany(p => p.Articles)
                .UsingEntity<Dictionary<string, object>>(
                    "ArticleArtifact",
                    r => r.HasOne<Artifact>().WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__ArticleAr__artif__5AEE82B9"),
                    l => l.HasOne<Article>().WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__ArticleAr__artic__59FA5E80"),
                    j =>
                    {
                        j.HasKey("ArticleId", "ArtifactId").HasName("PK__ArticleA__2631BC160BFFC6E1");
                        j.ToTable("ArticleArtifact");
                        j.IndexerProperty<int>("ArticleId").HasColumnName("article_id");
                        j.IndexerProperty<int>("ArtifactId").HasColumnName("artifact_id");
                    });
        });

        modelBuilder.Entity<Artifact>(entity =>
        {
            entity.HasKey(e => e.ArtifactId).HasName("PK__Artifact__A074A76F74FC7D61");

            entity.ToTable("Artifact");

            entity.Property(e => e.ArtifactId).HasColumnName("artifact_id");
            entity.Property(e => e.ArtifactTypeId).HasColumnName("artifact_type_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ScientificName)
                .HasMaxLength(100)
                .HasColumnName("scientific_name");

            entity.HasOne(d => d.ArtifactType).WithMany(p => p.Artifacts)
                .HasForeignKey(d => d.ArtifactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Artifact__artifa__5070F446");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ArtifactCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Artifact__Create__5165187F");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ArtifactModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("FK__Artifact__Modifi__52593CB8");
        });

        modelBuilder.Entity<ArtifactMedia>(entity =>
        {
            entity.HasKey(e => e.ArtifactMediaId).HasName("PK__Artifact__6FE8719707C9A7E4");

            entity.Property(e => e.ArtifactMediaId).HasColumnName("artifactMedia_id");
            entity.Property(e => e.ArtifactId).HasColumnName("artifact_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("type");
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("url");

            entity.HasOne(d => d.Artifact).WithMany(p => p.ArtifactMedia)
                .HasForeignKey(d => d.ArtifactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ArtifactM__artif__5DCAEF64");
        });

        modelBuilder.Entity<ArtifactType>(entity =>
        {
            entity.HasKey(e => e.ArtifactTypeId).HasName("PK__Artifact__DFAFE690C271E222");

            entity.ToTable("ArtifactType");

            entity.Property(e => e.ArtifactTypeId).HasColumnName("artifact_type_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.TopicId).HasColumnName("topic_id");

            entity.HasOne(d => d.Topic).WithMany(p => p.ArtifactTypes)
                .HasForeignKey(d => d.TopicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ArtifactT__topic__4CA06362");
        });

        modelBuilder.Entity<Chapter>(entity =>
        {
            entity.HasKey(e => e.ChapterId).HasName("PK__Chapter__745EFE8799C2F516");

            entity.ToTable("Chapter");

            entity.Property(e => e.ChapterId).HasColumnName("chapter_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ChapterCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Chapter__Created__4316F928");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ChapterModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("FK__Chapter__Modifie__440B1D61");

            entity.HasOne(d => d.Subject).WithMany(p => p.Chapters)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Chapter__subject__4222D4EF");
        });

        modelBuilder.Entity<Recognition>(entity =>
        {
            entity.HasKey(e => e.RecognitionId).HasName("PK__Recognit__73D1F5ADF8E1C10D");

            entity.ToTable("Recognition");

            entity.Property(e => e.RecognitionId).HasColumnName("recognition_id");
            entity.Property(e => e.AiResult).HasColumnName("ai_result");
            entity.Property(e => e.ArtifactId).HasColumnName("artifact_id");
            entity.Property(e => e.ConfidenceScore).HasColumnName("confidence_score");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.RecognizedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("recognized_at");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("PENDING")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Artifact).WithMany(p => p.Recognitions)
                .HasForeignKey(d => d.ArtifactId)
                .HasConstraintName("FK__Recogniti__artif__6383C8BA");

            entity.HasOne(d => d.User).WithMany(p => p.Recognitions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Recogniti__user___6477ECF3");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.SubjectId).HasName("PK__Subject__5004F66021B96CA2");

            entity.ToTable("Subject");

            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SubjectCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Subject__Created__3D5E1FD2");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SubjectModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("FK__Subject__Modifie__3E52440B");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.TopicId).HasName("PK__Topic__D5DAA3E9800F4B03");

            entity.ToTable("Topic");

            entity.Property(e => e.TopicId).HasColumnName("topic_id");
            entity.Property(e => e.ChapterId).HasColumnName("chapter_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");

            entity.HasOne(d => d.Chapter).WithMany(p => p.Topics)
                .HasForeignKey(d => d.ChapterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Topic__chapter_i__47DBAE45");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TopicCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Topic__CreatedBy__48CFD27E");

            entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TopicModifiedByNavigations)
                .HasForeignKey(d => d.ModifiedBy)
                .HasConstraintName("FK__Topic__ModifiedB__49C3F6B7");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId).HasName("PK__UserAcco__DA6C70BA06C03E54");

            entity.ToTable("UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.EmployeeCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.RoleId).HasDefaultValue(2);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}